#+title: Layout protocol
#+author: Daniel Kochmański
#+date: [2022-05-27 pią]

* Layout protocol

The layout protocol is triggered by a call to ~layout-frame~. This function
may be called as a result of:

- adopting the frame by a frame manager
- external event that changes the frame geometry ~window-configuration-event~
- user call to change the frame layout
- user call to change the space requierments ~change-space-requirements~

The protocol is executed in two passes:

** Composition

The function ~(compose-space pane &key width height)~ takes parameters that
denote a suggested width and height of the pane and uses the user space
requirements provided when the pane is created (~:min-width~, ~:width~ etc)
and returns an instance of the class ~standard-space-requierement~ that
specifies min, max and optimum size of the pane.

Results of ~compose-space~ are cached. The cached value is invalided by a call
to ~change-space-requirements~.

** Allocation

The function ~(allocate-space pane width height)~ is responsible for arranging
the pane children by changing their geometry and invoking ~allocate-space~ on
each of them. ~allocate-space~ does not change the geometry of its "own" pane.
Sometimes it is not possible to meet the pane requirements, in that case
~allocate-space~ may be called with values that are "outside" of the pane
space requirement.

* Changing the space requirements

When space requirements are changed with ~change-space-requirements~, then
user preferences are updated. Then the parent is notified about that with
~(note-sheet-requirements-changed parent pane)~. The parent may decide to
re-allocate the space for children or to escalate the changed requirements to
its own parents.

Sometimes numerous changes to space requirements happen in a single batch of
invocations. For example the pane requirement may be specified as ~:compute~,
that is to be able to contain the stream output history. In that case when we
redisplay the frame, then first we call ~window-clear~ and then we produce a
new output history. That results in two calls to ~change-space-requirements~.
To avoid consecutive changes to the sheet size all these calls may be wrapped
in ~changing-space-requirements~ - as a result all changes will be merged and
executed only once the top-most macro invocation exits.

Merging calls inside ~changing-space-requirements~ may be a little tricky,
because changes may happen at different points in the hierarchy with different
options. It is important for each call to update the user preferences,
invalidate intervening cached values of ~compose-space~ and call depending on
options either ~allocate-space~ or ~layout-frame~.
