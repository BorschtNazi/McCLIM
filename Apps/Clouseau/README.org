#+TITLE:    Inspector Clouseau README
#+AUTHOR:   Jan Moringen
#+EMAIL:    jmoringe@techfak.uni-bielefeld.de
#+LANGUAGE: en

#+OPTIONS: num:nil

* Introduction

  The ~clouseau~ system provides a CLIM-based graphical inspector ([[https://en.wikipedia.org/wiki/Inspector_Clouseau][get
  it?]]) for Common Lisp objects. It can be used as a standalone
  application or embedded into CLIM applications.

  Compared to the [[https://common-lisp.net/project/slime/][SLIME]] inspector, it has the following advantages:

  +

* Quick Start

  Start your Lisp system (the ~clouseau~ system should be portable,
  but only SBCL and CCL have been tested) and load the system:

  #+BEGIN_SRC lisp :exports both :results silent
    (asdf:load-system "clouseau")
  #+END_SRC

  Then inspect an object:

  #+BEGIN_SRC lisp :exports code
    (clouseau:inspect
     (make-array 4 :adjustable t
                   :fill-pointer 3
                   :initial-contents (list 1.5d0 #'numberp
                                           (list (cons #\a "foo")
                                                 (cons :bar #P"baz"))
                                           (alexandria:alist-hash-table
                                            (list (cons #C(1 2)
                                                        (find-class 'class)))))))
  #+END_SRC

  A window containing the following should open (in the screenshot,
  the array elements have been expanded by left-clicking them):

  #+BEGIN_SRC lisp :exports results :results output file
    (mcclim-raster-image::with-raster-image-port (port :rgb-image 1000 1000)
      (let* ((tls (mcclim-raster-image::make-raster-top-level-sheet port :png))
             (ins (make-instance 'clouseau::inspector-pane
                                 :port port
                                 :root (find-class 'class))))
        (clim:sheet-adopt-child tls ins)
        (clim:realize-mirror port tls)
        (setf (clim:sheet-region tls) (make-rectangle* 0 0 1000 1000))
        (clim:with-output-recording-options (ins :record nil :draw nil)
          (clouseau::present-inspected-object-graph (clouseau::state ins) ins)
          (setf (clouseau::slot-style (clouseau::state (clouseau::root-place (clouseau::state ins)))) :by-class))
        (clim:with-output-recording-options (ins :record nil :draw t)
          (setf (clim:stream-cursor-position ins) (values 0 0))
          (clouseau::present-inspected-object-graph (clouseau::state ins) ins))
        (climi::write-bitmap-file
         (mcclim-raster-image::image-mirror-image (clim:sheet-mirror tls))
         "screenshot.png" :format :png)))
    (princ "screenshot.png")
  #+END_SRC

  #+RESULTS:
  [[file:images/screenshot.png]]

  + Left-click an object to expand or collapse it.

  + Middle-click an object to make it the new root (as in the SLIME
    inspector).

  + Right-click an object to open a context menu containing other
    commands applicable to the object.

* Documentation

  + For user and developer documentation see the Inspector chapter in
    file:../../Documentation/Manual/Texinfo/.

  + For design-related documentation that may be useful when working
    on the inspector clouseau system itself, see [[file:DESIGN.org]].
